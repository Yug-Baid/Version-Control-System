// backend/seed.js

const mongoose = require('mongoose');
const bcrypt = require('bcryptjs');
const dotenv = require('dotenv');
const User = require('./models/userModel.js'); //
const Repo = require('./models/repoModel.js'); //
const { S3, S3_BUCKET } = require('./config/aws-config.js'); //
const mime = require('mime-types');

// Load environment variables from .env file
dotenv.config(); //

const MONGO_URL = process.env.MONGO_URL; //

// --- Sample Data ---

const usersToCreate = [ //
    { name: 'Yug', email: 'yug@example.com' },
    { name: 'Mayank', email: 'mayank@example.com' },
    { name: 'Yash', email: 'yash@example.com' },
    { name: 'Aman', email: 'aman@example.com' },
    { name: 'Shrikishan', email: 'shrikishan@example.com' },
    { name: 'TestUser', email: 'test@example.com' }
];

const sampleRepoIdeas = [ //
    { name: 'dotfiles', description: 'Personal configuration files.' },
    { name: 'blog-engine', description: 'A simple blog built with Node.js.' },
    { name: 'portfolio', description: 'Developer portfolio website.' },
    { name: 'data-structures', description: 'Implementations of common data structures.' },
    { name: 'learning-project', description: 'Repository for learning new tech.' },
    { name: 'utility-scripts', description: 'Collection of useful scripts.' },
    { name: 'simple-webpage', description: 'A basic HTML/CSS webpage.' },
    { name: 'api-service', description: 'A sample API backend.' },
];

const languages = ['JavaScript', 'HTML', 'CSS', 'Python', 'Markdown', 'Text']; //

// Sample File Contents
const readmeContent = `# Sample Repository

This is a sample README file generated by the seeder.
`; //

const textFileContent = `Hello World!
This is a sample text file.
Generated on: ${new Date().toISOString()}
`; //

const jsFileContent = `// Sample JavaScript file
function greet(name) {
  console.log(\`Hello, \${name}!\`);
}

greet('World');

// Add a simple calculation
const add = (a, b) => a + b;
console.log('2 + 3 =', add(2, 3));
`; //

const htmlFileContent = `<!DOCTYPE html>
<html>
<head>
  <title>Sample Page</title>
  <style>
    body { font-family: sans-serif; background-color: #f0f0f0; }
    h1 { color: #333; }
  </style>
</head>
<body>
  <h1>Welcome!</h1>
  <p>This is a sample HTML page seeded into the repository.</p>
  <script>
    console.log('Inline script executed!');
  </script>
</body>
</html>
`; //

// --- Helper Functions ---
const getRandomItem = (arr) => arr[Math.floor(Math.random() * arr.length)]; //
const getRandomInt = (min, max) => Math.floor(Math.random() * (max - min + 1)) + min; //

// Function to upload a file content directly to S3
const uploadToS3 = async (userId, repoName, fileName, content) => { //
    const s3Key = `${userId}/${repoName}/commit_files/${fileName}`; //
    const params = { //
        Bucket: S3_BUCKET, //
        Key: s3Key, //
        Body: content, //
        ContentType: mime.lookup(fileName) || 'application/octet-stream' //
    };
    try {
        await S3.putObject(params).promise(); //
        console.log(`   ‚îî‚îÄ S3 Upload SUCCESS: s3://${S3_BUCKET}/${s3Key}`); //
    } catch (error) {
        console.error(`   ‚îî‚îÄ S3 Upload FAILED for ${s3Key}:`, error); //
    }
};

// --- Seeding Function ---

const seedDatabase = async () => { //
    // ... (Environment variable checks remain the same) ...
     if (!MONGO_URL) {
        console.error('‚ùå Error: MONGO_URL is not defined in your .env file.');
        process.exit(1);
    }
    if (!S3_BUCKET || !process.env.AWS_ACCESS_KEY_ID || !process.env.AWS_SECRET_ACCESS_KEY || !process.env.AWS_REGION) {
         console.error('‚ùå Error: AWS S3 configuration (S3_BUCKET, AWS Keys, AWS_REGION) missing in .env file.');
         process.exit(1);
    }

    let dbConnection; //
    try {
        // 1. Connect to MongoDB
        dbConnection = await mongoose.connect(MONGO_URL); //
        console.log('‚úÖ Database connected successfully.'); //

        // 2. Clean up MongoDB data
        console.log('üßπ Clearing existing users and repos from MongoDB...'); //
        await User.deleteMany({}); //
        await Repo.deleteMany({}); //
        console.log('üßπ MongoDB cleared.'); //

        // 4. Hash Default Password
        const salt = await bcrypt.genSalt(10); //
        const defaultPassword = 'password123'; //
        const hashedPassword = await bcrypt.hash(defaultPassword, salt); //
        console.log(`üîë Default password for all users: ${defaultPassword}`); //

        const createdUsersData = []; // Store { id: string, repos: RepoDoc[] }

        // 5. Create Users and Repos (DB only first)
        for (const userData of usersToCreate) { //
            console.log(`\n--- Creating user: ${userData.name} ---`); //

            const newUser = new User({ /* ... user data ... */ //
                 name: userData.name,
                email: userData.email,
                password: hashedPassword,
                repositories: [],
                followedUser: [],
                StarRepos: [],
             });

            const savedUser = await newUser.save(); //
            console.log(`  üë§ User ${savedUser.name} created with ID: ${savedUser._id}`); //

            const createdRepos = []; // Store repo documents for this user
            const repoCount = getRandomInt(3, 4); // Each user gets 3 or 4 repos //

            for (let i = 0; i < repoCount; i++) { //
                const repoIdea = getRandomItem(sampleRepoIdeas); //
                const language = getRandomItem(languages); //

                // --- MODIFIED REPO NAME GENERATION ---
                // Include username (lowercase) to ensure uniqueness across users
                const repoName = `${savedUser.name.toLowerCase()}-${repoIdea.name}-${i}`;
                // ------------------------------------

                console.log(`  ‚Ü≥ Creating repo in DB: ${repoName} (Lang: ${language})`); //

                const newRepo = new Repo({ //
                    name: repoName, // Use the new unique name
                    description: repoIdea.description, //
                    visibility: Math.random() > 0.2, //
                    owner: savedUser._id, //
                    language: language, //
                    issues: [], //
                });

                try {
                    const savedRepo = await newRepo.save(); //
                    createdRepos.push(savedRepo); // Store the full repo document
                    console.log(`    Repo ${savedRepo.name} saved to DB.`); //
                } catch (repoSaveError) {
                    // Catch potential duplicate errors during seeding itself (less likely now but good practice)
                    if (repoSaveError.code === 11000) {
                         console.warn(`    WARN: Could not create repo '${repoName}' due to potential duplicate (Skipping).`);
                    } else {
                         throw repoSaveError; // Re-throw other errors
                    }
                }
            }

            // Update User with Repo IDs
            savedUser.repositories = createdRepos.map(repo => repo._id); // Store only IDs in user doc //
            await savedUser.save(); //
            console.log(`  üîó Linked ${createdRepos.length} repos to user ${savedUser.name}.`); //

            // Store user ID and their created repo documents for S3 seeding later
            createdUsersData.push({ id: savedUser._id.toString(), repos: createdRepos }); //
        }

        // 8. Clear relevant S3 Data (Use with caution!)
        console.log(`\nüßπ Clearing S3 data in bucket '${S3_BUCKET}' for newly created users...`); //
        let objectsToDelete = []; //
        try {
            for (const userData of createdUsersData) { //
                const userId = userData.id; //
                console.log(`  Listing objects for user ID: ${userId}`); //
                const listParams = { Bucket: S3_BUCKET, Prefix: `${userId}/` }; //
                let isTruncated = true; //
                let continuationToken; //

                while (isTruncated) { //
                   const response = await S3.listObjectsV2({ ...listParams, ContinuationToken: continuationToken }).promise(); //
                   if (response.Contents && response.Contents.length > 0) { //
                        const userObjects = response.Contents.map(item => ({ Key: item.Key })); //
                        objectsToDelete = objectsToDelete.concat(userObjects); //
                        console.log(`    Found ${userObjects.length} objects for user ${userId}...`); //
                   }
                   isTruncated = response.IsTruncated; //
                   continuationToken = response.NextContinuationToken; //
                }
            }

            if (objectsToDelete.length > 0) { //
                console.log(`  Attempting to delete ${objectsToDelete.length} objects from S3...`); //
                for (let i = 0; i < objectsToDelete.length; i += 1000) { //
                    const chunk = objectsToDelete.slice(i, i + 1000); //
                    const deleteParams = { Bucket: S3_BUCKET, Delete: { Objects: chunk } }; //
                    await S3.deleteObjects(deleteParams).promise(); //
                    console.log(`    Deleted S3 object chunk ${Math.floor(i / 1000) + 1}...`); //
                }
                console.log("  S3 previous data deletion complete."); //
            } else {
                console.log("  No existing S3 objects found for created users to delete."); //
            }
       } catch (s3Error) {
            console.error("‚ùå Error during S3 cleanup:", s3Error); //
       }

        // 9. Seed S3 Content
        console.log("\n‚òÅÔ∏è Uploading seeded content to S3..."); //
        for (const userData of createdUsersData) { //
            const userId = userData.id; //
            for (const repo of userData.repos) { //
                 console.log(`  ‚òÅÔ∏è Uploading files for ${userId}/${repo.name}...`); //
                await uploadToS3(userId, repo.name, 'README.md', readmeContent); //
                const repoIndex = userData.repos.findIndex(r => r._id.equals(repo._id)); //
                await uploadToS3(userId, repo.name, `info_${repoIndex}.txt`, textFileContent + `\nRepo Index: ${repoIndex}`); //

                if (repo.language === 'JavaScript' || repo.name.includes('script') || repo.name.includes('api')) { //
                    await uploadToS3(userId, repo.name, 'app.js', jsFileContent); //
                } else if (repo.language === 'HTML' || repo.name.includes('webpage') || repo.name.includes('portfolio')) { //
                    await uploadToS3(userId, repo.name, 'index.html', htmlFileContent); //
                }
            }
        }
        console.log("‚òÅÔ∏è S3 seeding complete."); //


        console.log('\n‚úÖ Seeding complete! Database populated and S3 seeded.'); //

    } catch (error) {
        console.error('\n‚ùå Error during seeding process:', error); //
    } finally {
        // 10. Disconnect from MongoDB
        if (dbConnection) { //
            await mongoose.disconnect(); //
            console.log('üîå Database disconnected.'); //
        }
        process.exit(0); // Exit script //
    }
};

// Run the seed script
seedDatabase(); //